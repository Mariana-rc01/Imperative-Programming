1. Estado e atribuições

1.1)

int x, y;
x = 3;
y = x+1;
x = x*y; y = x + y;
printf("%d %d\n", x, y);

R: 12 16

1.2)

int x, y;
x = 0;
printf ("%d %d\n", x, y);

R: erro, nada foi atribuido ao y.

1.3)

char a, b, c;
a = ’A’; b = ’ ’; c = ’0’;
printf ("%c %d\n", a, a);
a = a+1; c = c+2;
printf ("%c %d %c %d\n", a, a, c, c);
c = a + b;
printf ("%c %d\n", c, c);

R: A 65
   B 66 2 50
   b 98

1.4)

int x, y;
x = 200; y = 100;
x = x+y; y = x-y; x = x-y;
printf ("%d %d\n", x, y);

R: 100 200

2. Estruturas de controlo

a)

int x, y;
x = 3; y = 5;
if (x > y)
y = 6;
printf ("%d %d\n", x, y);

R: 3 5, a condiçao x>y nao se verifica

b)

int x, y;
x = y = 0;
while (x != 11) {
x = x+1; y += x;
}
printf ("%d %d\n", x, y);

R: 11 66

x -> 0 1 2 3 4 5 6 7 8 9 10 11
y -> 1 2 3 6 10 15 21 28 36 45 55 66

c)

int i;
for (i=0; (i<20) ; i++)
  if (i%2 == 0) putchar (’_’);
  else putchar (’#’);

R: _#_#_#_#_#_#_#_#_#_#
Quando o resto da divisao inteira do i com 2 for 0, acrescenta '_', ou seja,
quando i par -> '_'; quando i impar -> '#'. O programa inicia em 0 e termina em 19.

d)

void f (int n) {
    while (n>0) {
        if (n%2 == 0) putchar (’0’);
        else putchar (’1’);
        n = n/2;
    }
    putchar (’\n’);
}
int main () {
    int i;
    for (i=0;(i<16);i++)
        f (i);
    return 0;
}

R: 1
   01
   11
   001
   101
   011
   111
   0001
   1001
   0101
   1101
   0011
   1011
   0111
   1111